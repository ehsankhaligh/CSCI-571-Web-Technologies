{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { switchMap, debounceTime, tap, finalize } from 'rxjs/operators';\nimport { Component } from '@angular/core';\nimport * as Highcharts from 'highcharts/highstock';\n\nrequire('highcharts/indicators/indicators')(Highcharts);\n\nrequire('highcharts/indicators/volume-by-price')(Highcharts);\n\nimport { NewsShareComponent } from '../news-share/news-share.component';\nimport { TradeboxbuyComponent } from '../tradeboxbuy/tradeboxbuy.component';\nimport { TradeboxsellComponent } from '../tradeboxsell/tradeboxsell.component';\nlet DetailsSectionComponent = class DetailsSectionComponent {\n  constructor(newsPopUpNgbModal, buyPopUpNgbModal, formBuilder, route, searchRout, backendServiceReq) {\n    this.newsPopUpNgbModal = newsPopUpNgbModal;\n    this.buyPopUpNgbModal = buyPopUpNgbModal;\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.searchRout = searchRout;\n    this.backendServiceReq = backendServiceReq;\n    this.stockPrice = []; //populate from json\n\n    this.aboutcompany = [];\n    this.newsdata = [];\n    this.buySell = [];\n    this.stockHistoricalData = [];\n    this.stockChartsSecHistoricalData = [];\n    this.companyPeers = [];\n    this.companySocialSent = [];\n    this.companySocialSentTwitter = [];\n    this.companySocialSentReddit = [];\n    this.stockcompRec = [];\n    this.companyEarnings = [];\n    this.filteredOptions = []; //populate from json\n\n    this.ticker = '';\n    this.isHighcharts = typeof Highcharts === 'object';\n    this.Highcharts = Highcharts;\n    this.flagChats = false;\n    this.tdbodyflag = false;\n    this.closeflag = false;\n    this.openFlag = false;\n    this.RedPriceColorflag = false;\n    this.priceColor = '';\n    this.highchartColorSummary = '';\n    this.starSelectedFlag = false;\n    this.currentSymbol = ''; //here\n\n    this.boughtFlag = false;\n    this.isLoading = false; //Add later if necessary\n  }\n\n  clearBox() {\n    this.ShowHideFlag = false;\n  }\n\n  StarListener() {\n    this.ShowHideFlag = true;\n    let watchList;\n    let newWatchList;\n    let indexremove; //console.log(\"#Start: storedNames:\", localStorage.getItem(\"items\"));\n\n    if (localStorage.getItem(\"items\") == null) {\n      watchList = []; //page just loaded first time\n      //console.log(\"if true\");\n    } else {\n      newWatchList = [];\n      watchList = JSON.parse(localStorage.getItem(\"items\")); //console.log(\"else\");\n    }\n\n    if (this.starSelectedFlag == false) {\n      this.starSelectedFlag = true;\n      this.ShowNotificationStarSelectedFlag = true;\n\n      if (watchList.length == 0) {\n        watchList.push(this.aboutcompany['ticker'] + \" | \" + this.aboutcompany['name'] + \" | \" + this.stockPrice[\"c\"] + \" | \" + this.stockPrice[\"d\"] + \" | \" + this.stockPrice[\"dp\"] + \" , \");\n        localStorage.setItem(\"items\", JSON.stringify(watchList)); //console.log(\"#watchList:\", watchList);\n      } else if (newWatchList.length == 0 && watchList.length != 0) {\n        newWatchList.push(this.aboutcompany['ticker'] + \" | \" + this.aboutcompany['name'] + \" | \" + this.stockPrice[\"c\"] + \" | \" + this.stockPrice[\"d\"] + \" | \" + this.stockPrice[\"dp\"] + \" , \");\n        watchList = watchList + newWatchList;\n        localStorage.setItem(\"items\", JSON.stringify(watchList)); //console.log(\"#watchList:\", watchList);\n      }\n    } else {\n      this.starSelectedFlag = false;\n      this.ShowNotificationStarSelectedFlag = false; //console.log(\"^^Before Delete watchList:\", watchList);\n\n      watchList.splice(this.indexDelete, 1);\n      localStorage.setItem(\"items\", JSON.stringify(watchList)); //console.log(\"^^Before After watchList:\", watchList);\n    }\n\n    var storedNames = JSON.parse(localStorage.getItem(\"items\")); //console.log(\"#storedNames:\", storedNames);\n  }\n\n  popNewsDetailsShareBox(dataObj) {\n    var mydate = new Date(dataObj[\"datetime\"] * 1000);\n    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    var year = mydate.getFullYear();\n    var month = months[mydate.getMonth()];\n    var date = mydate.getDate();\n    var time = date + ' ' + month + ', ' + year;\n    dataObj[\"time\"] = time;\n    const ngmodOpen = this.newsPopUpNgbModal.open(NewsShareComponent); //console.log(\"***ngmodOpen:\", ngmodOpen);\n\n    ngmodOpen.componentInstance.DataNewsObj = dataObj;\n  }\n\n  popBuyShareBox() {\n    const ngmodOpen = this.buyPopUpNgbModal.open(TradeboxbuyComponent); //console.log(\"***ngmodOpen:\", ngmodOpen);\n\n    this.buySell['ticker'] = this.aboutcompany['ticker'];\n    this.buySell['currentPrice'] = this.stockPrice[\"c\"];\n    this.buySell['name'] = this.aboutcompany[\"name\"];\n    ngmodOpen.componentInstance.DataBuyObj = this.buySell;\n    console.log(\"@@ngmodOpen.componentInstance.DataBuyObj.boxnotificationFlag:\", ngmodOpen.componentInstance.DataBuyObj.boxnotificationFlag);\n\n    if (ngmodOpen.componentInstance.DataBuyObj.boxnotificationFlag == true) {\n      this.boughtFlag = true;\n      this.ShowHideFlag = true;\n    }\n  }\n\n  popSellShareBox() {\n    const ngmodOpen = this.buyPopUpNgbModal.open(TradeboxsellComponent); //console.log(\"***ngmodOpen:\", ngmodOpen);\n\n    this.buySell['ticker'] = this.aboutcompany['ticker'];\n    this.buySell['currentPrice'] = this.stockPrice[\"c\"];\n    this.buySell['name'] = this.aboutcompany[\"name\"];\n    ngmodOpen.componentInstance.DataSellObj = this.buySell; //this.boughtFlag = true;\n    //this.ShowHideFlag = true;\n  }\n\n  drawChartHistoricalSection() {\n    let unixtimeStmp;\n    let ohlc_list = [];\n    let vol_list = [];\n    this.backendServiceReq.getCompanyHistoricalData(this.ticker).subscribe(data => {\n      this.stockChartsSecHistoricalData = data;\n\n      if (this.stockChartsSecHistoricalData.length != 0) {\n        let listLen = this.stockChartsSecHistoricalData['v'].length;\n        console.log('drawChartHistoricalSection()' + Date());\n\n        for (let i = 0; i < listLen; i += 1) {\n          try {\n            unixtimeStmp = this.stockChartsSecHistoricalData[\"t\"][i] * 1000;\n            vol_list.push(unixtimeStmp, this.stockChartsSecHistoricalData['v'][i]);\n            ohlc_list.push([unixtimeStmp, this.stockChartsSecHistoricalData['o'][i], this.stockChartsSecHistoricalData['h'][i], this.stockChartsSecHistoricalData['l'][i], this.stockChartsSecHistoricalData['c'][i]]);\n          } catch (erro) {\n            console.log(\"Error\"); //debug later\n          }\n        }\n\n        console.log('ohlc_list:' + ohlc_list);\n        console.log('vol_list:' + vol_list);\n\n        const Highcharts = require('highcharts');\n\n        let ticker_name = this.ticker.toUpperCase(); //here now\n\n        this.chartsSectionStockChart = Highcharts.stockChart('container', {\n          series: [{\n            type: 'candlestick',\n            name: ticker_name,\n            id: 'aapl',\n            zIndex: 2,\n            data: ohlc_list,\n            pointInterval: 24 * 3600 * 1000\n          }, {\n            type: 'column',\n            name: 'Volume',\n            id: 'volume',\n            data: vol_list,\n            yAxis: 1,\n            pointInterval: 24 * 3600 * 1000\n          }, {\n            type: 'vbp',\n            linkedTo: 'aapl',\n            params: {\n              volumeSeriesID: 'volume'\n            },\n            dataLabels: {\n              enabled: false\n            },\n            zoneLines: {\n              enabled: false\n            }\n          }, {\n            type: 'sma',\n            linkedTo: 'aapl',\n            zIndex: 1,\n            marker: {\n              enabled: false\n            }\n          }],\n          rangeSelector: {\n            selected: 1\n          },\n          title: {\n            text: ticker_name + ' Historical'\n          },\n          subtitle: {\n            text: 'With SMA and Volume by Price technical indicators'\n          },\n          yAxis: [{\n            startOnTick: false,\n            endOnTick: false,\n            labels: {\n              align: 'right',\n              x: -3\n            },\n            title: {\n              text: 'OHLC'\n            },\n            height: '60%',\n            lineWidth: 2,\n            resize: {\n              enabled: true\n            }\n          }, {\n            labels: {\n              align: 'right',\n              x: -3\n            },\n            title: {\n              text: 'Volume'\n            },\n            top: '65%',\n            height: '35%',\n            offset: 0,\n            lineWidth: 2\n          }],\n          tooltip: {\n            split: true\n          },\n          plotOptions: {\n            series: {\n              dataGrouping: {\n                units: [['minute', [1]], ['month', [1, 2, 3, 4, 6, 12]]]\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  getEarnings() {\n    this.backendServiceReq.getCompanyEarningData(this.ticker).subscribe(data => {\n      this.companyEarnings = data; //console.log('this.companyEarnings', this.companyEarnings);\n\n      console.log('getEarnings()' + Date());\n      let categories_list = [];\n      let actual_list = [];\n      let estimate_list = [];\n      let count = this.companyEarnings.length;\n\n      for (let i = 0; i < count; i += 1) {\n        //[{\"actual\":1.09,\"estimate\":0.9237,\"period\":\"2021-12-31\",\"surprise\":0.1663,\"surprisePercent\":18.0037,\"symbol\":\"INTC\"} ...\n        //console.log('>>>this.companyEarnings[surprise]', this.companyEarnings[i][\"surprise\"]);\n        //console.log('>>>this.companyEarnings[actual]', this.companyEarnings[i][\"actual\"]);\n        //console.log('>>>this.companyEarnings[period]', this.companyEarnings[i][\"period\"]);\n        //console.log('>>>this.companyEarnings[estimate]', this.companyEarnings[i][\"estimate\"]);\n        let surprise = this.companyEarnings[i][\"surprise\"];\n        let period = this.companyEarnings[i][\"period\"];\n        categories_list.push(period + \" Surprise:\" + surprise);\n        actual_list.push(this.companyEarnings[i][\"actual\"]);\n        estimate_list.push(this.companyEarnings[i][\"estimate\"]);\n      } //console.log('>>>categories_list', categories_list);\n      //console.log('>>>actual_list', actual_list);\n      //console.log('>>>estimate_list', estimate_list);\n\n\n      const Highcharts = require('highcharts');\n\n      this.espChart = {\n        chart: {\n          type: 'spline'\n        },\n        title: {\n          align: 'center',\n          text: 'Historical ESP Surprises'\n        },\n        subtitle: {\n          text: ''\n        },\n        xAxis: {\n          categories: categories_list\n        },\n        yAxis: {\n          title: {\n            text: 'Quarterly ESP'\n          },\n          labels: {\n            formatter: function () {\n              return this.value + '';\n            }\n          }\n        },\n        tooltip: {\n          crosshairs: true,\n          shared: true\n        },\n        plotOptions: {\n          spline: {\n            marker: {\n              radius: 4,\n              lineColor: '#666666',\n              lineWidth: 1\n            }\n          }\n        },\n        series: [{\n          name: 'Actual',\n          marker: {\n            symbol: 'square'\n          },\n          data: actual_list\n        }, {\n          name: 'Estimate',\n          marker: {\n            symbol: 'diamond'\n          },\n          data: estimate_list\n        }]\n      };\n    });\n  }\n\n  getStockRec() {\n    this.backendServiceReq.getCompanyStockRecData(this.ticker).subscribe(data => {\n      this.stockcompRec = data;\n\n      if (this.stockcompRec.length != 0) {\n        let x_axis_list = [];\n        let stongBuy_list = [];\n        let buy_list = [];\n        let hold_list = [];\n        let strongSell_list = [];\n        let sell_list = [];\n        let count_loop = 4; //console.log('this.stockcompRec:' + this.stockcompRec);\n        //console.log('getStockRec()' + Date());\n        //[{\"buy\":32,\"hold\":4,\"period\":\"2022-03-01\",\"sell\":0,\"strongBuy\":22,\"strongSell\":0,\"symbol\":\"MSFT\"} ...\n\n        for (let i = 0; i < count_loop; i += 1) {\n          buy_list.push(this.stockcompRec[i]['buy']);\n          hold_list.push(this.stockcompRec[i]['hold']);\n          sell_list.push(this.stockcompRec[i]['sell']);\n          x_axis_list.push(this.stockcompRec[i]['period']);\n          stongBuy_list.push(this.stockcompRec[i]['strongBuy']);\n          strongSell_list.push(this.stockcompRec[i]['strongSell']);\n        } //console.log(\"x_axis_list:\", x_axis_list);\n        //console.log(\"stongBuy_list:\", stongBuy_list);\n        //console.log(\"buy_list:\", buy_list);\n        //console.log(\"hold_list:\", hold_list);\n        //console.log(\"strongSell_list:\", strongSell_list);\n        //console.log(\"sell_list:\", sell_list);\n\n\n        const Highcharts = require('highcharts');\n\n        this.recomChart = {\n          chart: {\n            type: 'column'\n          },\n          title: {\n            text: 'Recommendation Trends'\n          },\n          xAxis: {\n            categories: x_axis_list\n          },\n          yAxis: {\n            min: 0,\n            title: {\n              text: ''\n            },\n            stackLabels: {\n              enabled: true,\n              style: {\n                fontWeight: 'bold',\n                color: // theme\n                Highcharts.defaultOptions.title.style && Highcharts.defaultOptions.title.style.color || 'gray'\n              }\n            }\n          },\n          legend: {\n            align: 'center',\n            x: -30,\n            verticalAlign: 'bottom',\n            y: 25,\n            floating: true,\n            backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || 'white',\n            borderColor: '#CCC',\n            borderWidth: 1,\n            shadow: false\n          },\n          tooltip: {\n            headerFormat: '<b>{point.x}</b><br/>',\n            pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'\n          },\n          plotOptions: {\n            column: {\n              stacking: 'normal',\n              dataLabels: {\n                enabled: true\n              }\n            }\n          },\n          series: [{\n            name: 'Strong Buy',\n            data: stongBuy_list,\n            color: \"#006600\"\n          }, {\n            name: 'Buy',\n            data: buy_list,\n            color: \"#00CC00\"\n          }, {\n            name: 'Hold',\n            data: hold_list,\n            color: \"#F59E1D\"\n          }, {\n            name: 'Sell',\n            data: sell_list,\n            color: \"#FF6666\"\n          }, {\n            name: 'Strong Sell',\n            data: strongSell_list,\n            color: \"#660000\"\n          }]\n        };\n      }\n    });\n  }\n\n  getComonyNews() {\n    this.backendServiceReq.getCompanyNewsData(this.ticker).subscribe(data => {\n      this.newsdata = data;\n      console.log('getComonyNews()' + Date());\n    });\n  }\n\n  getSocialSent() {\n    this.backendServiceReq.getCompanySocialSentimentData(this.ticker).subscribe(data => {\n      this.companySocialSent = data; //this.companySocialSentTwitter = this.companySocialSent['twitter'];\n      //this.companySocialSentReddit = this.companySocialSent['reddit'];\n\n      try {\n        if (this.companySocialSent.length != 0) {\n          this.tdbodyflag = true;\n          this.companySocialSentTwitter = this.companySocialSent['twitter'];\n          this.companySocialSentReddit = this.companySocialSent['reddit']; //here\n\n          if (this.companySocialSentTwitter == [] || this.companySocialSentReddit == []) {\n            this.showDataflag = false;\n          } else {\n            this.showDataflag = true;\n          }\n\n          console.log(\"---->>this.showDataflag\", this.showDataflag);\n          console.log(\"---->>this.companySocialSentTwitter\", this.companySocialSentTwitter);\n          console.log(\"---->>this.companySocialSentReddit\", this.companySocialSentReddit);\n        }\n\n        this.flagChats = true; //console.log(\"***reddit this.companySocialSent:\", this.companySocialSent['twitter'][0]);\n        //console.log(\"***twitter this.companySocialSent:\", this.companySocialSent['reddit'][0]);\n      } catch (error) {\n        console.log(\"\"); //debug later\n      }\n\n      console.log('getCompPeers()' + Date());\n    });\n  }\n\n  getCompPeers() {\n    this.backendServiceReq.getCompanyPeersArrayData(this.ticker).subscribe(data => {\n      this.companyPeers = data; //console.log(\"this.companyPeers:\", this.companyPeers);\n\n      console.log('getCompPeers()' + Date());\n    });\n  } //here\n\n\n  getStockPrice() {\n    this.backendServiceReq.getStockPriceInfo(this.ticker).subscribe(data => {\n      this.stockPrice = data;\n\n      if (this.stockPrice.length != 0) {\n        var date = new Date(this.stockPrice[\"t\"] * 1000);\n        let time = date.getFullYear() + \"-\" + date.getMonth() + \"-\" + date.getDate() + \" \" + date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n        this.stockPrice[\"t\"] = time;\n        let hh_mm_ss = date.getHours() + \":\"; //round two Decimals\n\n        this.stockPrice[\"dp\"] = Math.round(this.stockPrice[\"dp\"] * 100) / 100;\n\n        if (this.stockPrice[\"dp\"] < 0) {\n          this.RedPriceColorflag = true;\n          this.priceColor = \"color:red\";\n          this.highchartColorSummary = '#c96a77';\n        } else {\n          this.RedPriceColorflag = false;\n          this.priceColor = \"color:green\";\n          this.highchartColorSummary = '#a6c96a';\n        }\n\n        if (hh_mm_ss == '13:') {\n          this.closeflag = true;\n        } else {\n          this.openFlag = true;\n        }\n      }\n\n      console.log('getStockPrice()' + Date());\n    });\n  }\n\n  getAboutCompany() {\n    this.backendServiceReq.getAboutTheCompany(this.ticker).subscribe(data => {\n      this.aboutcompany = data;\n      console.log('getAboutCompany()' + Date());\n    });\n  }\n\n  drawChart() {\n    let stock_price_list = [];\n    this.backendServiceReq.getCompanyHistoricalDataSummaryTab(this.ticker).subscribe(data => {\n      this.stockHistoricalData = data;\n\n      if (this.stockHistoricalData.length != 0) {\n        let listLen = this.stockHistoricalData['c'].length;\n\n        for (let i = 0; i < listLen; i += 1) {\n          //let d = new Date();\n          //const unixtime = d.valueOf();\n          //console.log(this.stockHistoricalData['t'][i])\n          //d = new Date(this.stockHistoricalData['t'][i]);\n          try {\n            const unixTime = this.stockHistoricalData['t'][i] * 1000;\n            const date = new Date(unixTime * 1000); //console.log(\"unixTime\", unixTime);\n            //console.log(\"date.toLocaleDateString(\\\"en-US\\\"):\", date.toLocaleDateString(\"en-US\", { hour: '2-digit'}));\n            //console.log(\"date.toLocaleDateString(\\\"en-US\\\"):\", date.toLocaleTimeString(navigator.language, {hour: '2-digit'}));\n\n            const hour = date.toLocaleTimeString(navigator.language, {\n              hour: '2-digit'\n            }); //console.log(\"hour:\", hour);\n\n            stock_price_list.push([unixTime, this.stockHistoricalData['c'][i]]);\n          } catch (erro) {\n            console.log(\"\"); //debug later\n          }\n        }\n\n        const Highcharts = require('highcharts');\n\n        let ticker_name = this.ticker.toUpperCase();\n        this.chartOptions = {\n          series: [{\n            data: stock_price_list,\n            showInNavigator: true,\n            color: this.highchartColorSummary,\n            type: 'line',\n            tooltip: {\n              valueDecimals: 2\n            }\n          }],\n          title: {\n            text: ticker_name + \" Hourly Price Variation\"\n          },\n          rangeSelector: {\n            enabled: false\n          },\n          xAxis: {\n            type: 'datetime',\n            labels: {\n              //https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/labels/full-date\n              format: '{value:%H}'\n            }\n          },\n          navigator: {\n            series: {\n              fillOpacity: 0,\n              type: 'area',\n              color: '#a6c96a'\n            }\n          }\n        };\n      }\n    });\n  }\n\n  callfunctions() {\n    this.route.paramMap.subscribe(params => {\n      this.ticker = params.get('ticker');\n      console.log('http://localhost:4200/details/' + this.ticker);\n    });\n\n    try {\n      this.getStockPrice();\n      this.getAboutCompany();\n      this.getCompPeers();\n      this.getSocialSent();\n      this.getStockRec();\n      this.getEarnings();\n      this.getComonyNews();\n      this.getSocialSent();\n      this.drawChartHistoricalSection();\n      this.drawChart();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ngOnInit() {\n    console.log(\"**localStorage.getItem(\\\"balance\\\")\", localStorage.getItem(\"balance\"));\n    console.log(\"**localStorage.getItem(\\\"balance\\\")\", typeof localStorage.getItem(\"balance\"));\n\n    if (localStorage.getItem(\"balance\") == null) {\n      localStorage.setItem(\"balance\", \"25000\");\n      console.log(\"-->localStorage.getItem(\\\"balance\\\")\", localStorage.getItem(\"balance\"));\n    }\n\n    this.callfunctions();\n    let pageURL = this.searchRout.url;\n    let pageSymbol = pageURL.split(\"/\");\n    let currentpageSymbol = pageSymbol[2];\n    this.currentSymbol = currentpageSymbol; //console.log(\"this.router.url:\", pageURL);\n    //console.log(\"pageSymbol:\", pageSymbol[2]);\n    //console.log(\"~before if\");\n\n    if (localStorage.getItem(\"items\") != null) {\n      //console.log(\"~after if\");\n      let storedItems = localStorage.getItem(\"items\");\n      storedItems = storedItems.replace('\"', '');\n      storedItems = storedItems.replace(']', '');\n      storedItems = storedItems.replace('[', '');\n      let storedItemsList = storedItems.split(\"|\"); //console.log(\"~storedItems:\", storedItems);\n      //console.log(\"~storedItemsList:\", storedItemsList);\n\n      for (let i = 0; i < storedItemsList.length; i += 1) {\n        let str_tmp = storedItemsList[i]; //console.log(\"~str_tmp:\", str_tmp);\n\n        if (str_tmp.includes(currentpageSymbol) == true) {\n          this.indexDelete = i;\n          this.starSelectedFlag = true; //console.log(\"if ...\");\n          //console.log(\"<1>this.starSelectedFlag:\", this.starSelectedFlag);\n        }\n      }\n    }\n\n    this.companySearchMatchForm = this.formBuilder.group({\n      userSearchInput: ''\n    });\n    this.companySearchMatchForm.get('userSearchInput').valueChanges.pipe(debounceTime(100), tap(() => this.isLoading = true), switchMap(value => this.backendServiceReq.getSearchAutoComp(value).pipe(finalize(() => this.isLoading = false)))) //.subscribe(response => console.log(response)); //test\n    .subscribe(data => this.filteredOptions = data); //console.log(\"this.filteredOptions\" + this.filteredOptions);\n  }\n\n  onSubmit(symbolData) {\n    try {\n      if (symbolData.userSearchInput.symbol) {\n        this.symbol = symbolData.userSearchInput.symbol; //console.log('here symbolData.userSearchInput.symbol: ', this.symbol);\n      } else {\n        this.symbol = symbolData.userSearchInput; //console.log('here else', this.symbol);\n      } //console.log('The user entered: ', this.symbol);\n\n\n      this.callfunctions();\n      this.searchRout.navigateByUrl('/details/' + this.symbol);\n    } catch (error) {\n      console.log(\"check/error: maybe search box empty\");\n    }\n  }\n\n  dropdown(option) {\n    //console.log(\"##option:\" + option)\n    if (option) {\n      //console.log(\"option if\")\n      //console.log(\"option.symbol: \" + option.symbol)\n      let result = option.symbol;\n      ;\n      return result;\n    }\n  }\n\n  clearSearch(symbolData) {\n    //console.log(\"@@symbolData.userSearchInput.symbol:\" + symbolData.userSearchInput.symbol);\n    //console.log(\"@@symbolData.userSearchInput:\" + symbolData.userSearchInput);\n    //console.log(\"Object.keys(symbolData).length:\"+Object.keys(symbolData).length);\n    try {\n      this.searchRout.navigateByUrl('/search/home');\n      this.companySearchMatchForm.reset();\n    } catch (error) {\n      console.log(\"check/error:  maybe search box empty\");\n    }\n  }\n\n  Search(symbolData) {\n    //console.log(\"!!symbolData.userSearchInput.symbol:\" + symbolData.userSearchInput.symbol);\n    //console.log(\"!!symbolData.userSearchInput:\" + symbolData.userSearchInput);\n    try {\n      this.onSubmit(symbolData);\n    } catch (error) {\n      console.log(\"check/error: maybe search box empty\");\n    }\n  }\n\n};\nDetailsSectionComponent = __decorate([Component({\n  selector: 'app-details-section',\n  templateUrl: './details-section.component.html',\n  styleUrls: ['./details-section.component.css']\n})], DetailsSectionComponent);\nexport { DetailsSectionComponent };","map":null,"metadata":{},"sourceType":"module"}